@page "/user"
@inject HttpClient HttpClient

<h3>Contacts List</h3>
<div class="form-group">
    <label for="search"><b>Search</b></label>
    <input type="text" class="form-control" id="search" @bind="@search" placeholder="Search by first name, last name, or email">
</div>

<table class="table table-bordered table-striped">
    <thead>
        <tr>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Email</th>
            <th>Title</th>
            <th>Description</th>
            <th>Date of Birth</th>
            <th>Marriage Status</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var contact in contacts)
        {
            <tr>
                <td>@contact.FirstName</td>
                <td>@contact.LastName</td>
                <td>@contact.Email</td>
                <td>@contact.Title</td>
                <td>@contact.Description</td>
                <td>@contact.DateOfBirth.ToShortDateString()</td>
                <td>@(contact.MarriageStatus ? "Married" : "Single")</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<ContactDatabase.API.Shared.Contact> contacts;
    private string search;

    protected override async Task OnInitializedAsync()
    {
        await LoadContacts();
    }

    private async Task LoadContacts()
    {
        contacts = await HttpClient.GetFromJsonAsync<List<ContactDatabase.API.Shared.Contact>>("api/contacts");
    }

    private async Task SearchContacts()
    {
        if (!string.IsNullOrEmpty(search))
        {
            contacts = await HttpClient.GetFromJsonAsync<List<ContactDatabase.API.Shared.Contact>>($"api/contacts?search={search}");
        }
        else
        {
            await LoadContacts();
        }
    }
}
